{"ast":null,"code":"var _jsxFileName = \"/Users/opeyemiagbeja/Desktop/Stutern/react/routing-project/frontend/src/App.js\";\n// Challenge / Exercise\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\nimport React from 'react';\nimport { createBrowserRouter, RouterProvider } from 'react-router-dom';\nimport Root from './pages/Root';\nimport HomePage from './pages/HomePage';\nimport EventsPage from './pages/EventsPage';\nimport EventDetailPage from './pages/EventDetailPage';\nimport NewEventPage from './pages/NewEventPage';\nimport EditEventPage from './pages/EditEventPage';\nimport EventRootLayout from './pages/EventRoot';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst router = createBrowserRouter([{\n  path: '/',\n  element: /*#__PURE__*/_jsxDEV(Root, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 14\n  }, this),\n  children: [{\n    index: true,\n    element: /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 29\n    }, this)\n  }, {\n    path: \"events\",\n    element: /*#__PURE__*/_jsxDEV(EventRootLayout, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 15\n    }, this),\n    children: [{\n      index: true,\n      element: /*#__PURE__*/_jsxDEV(EventsPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this),\n      loader: async () => {\n        const response = await fetch('http://localhost:8080/events');\n        if (!response.ok) {\n          //...\n        } else {\n          const resData = await response.json();\n          resData.events;\n        }\n      }\n    }, {\n      path: ':eventId',\n      element: /*#__PURE__*/_jsxDEV(EventDetailPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 36\n      }, this)\n    }, {\n      path: 'new',\n      element: /*#__PURE__*/_jsxDEV(NewEventPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 31\n      }, this)\n    }, {\n      path: ':eventId/edit',\n      element: /*#__PURE__*/_jsxDEV(EditEventPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 41\n      }, this)\n    }]\n  }]\n}]);\nexport default function App() {\n  return /*#__PURE__*/_jsxDEV(RouterProvider, {\n    router: router\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 4\n  }, this);\n}\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","createBrowserRouter","RouterProvider","Root","HomePage","EventsPage","EventDetailPage","NewEventPage","EditEventPage","EventRootLayout","router","path","element","children","index","loader","response","fetch","ok","resData","json","events","App"],"sources":["/Users/opeyemiagbeja/Desktop/Stutern/react/routing-project/frontend/src/App.js"],"sourcesContent":["// Challenge / Exercise\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\nimport React from 'react';\nimport { createBrowserRouter, RouterProvider } from 'react-router-dom';\n\nimport Root from './pages/Root';\nimport HomePage from './pages/HomePage';\nimport EventsPage from './pages/EventsPage';\nimport EventDetailPage from './pages/EventDetailPage';\nimport NewEventPage from './pages/NewEventPage';\nimport EditEventPage from './pages/EditEventPage';\nimport EventRootLayout from './pages/EventRoot';\nconst router = createBrowserRouter([\n  {\n    path: '/',\n    element: <Root/>,\n    children:[\n    {index :true, element : <HomePage/>},\n    {path: \"events\", \n    element : <EventRootLayout/>,\n    children:[\n      {index: true,\n      element : <EventsPage/>,\n      loader: async ()=>{\n        const response = await fetch('http://localhost:8080/events');\n\n        if (!response.ok) {\n         //...\n        } else {\n          const resData = await response.json();\n          resData.events;\n        }\n      }\n    \n    },\n      {path: ':eventId', element : <EventDetailPage/>},\n      {path: 'new', element : <NewEventPage/>},\n      {path: ':eventId/edit', element : <EditEventPage/>}\n    ]\n    },\n    ],\n  }\n])\nexport default function App() {\n  return (\n   <RouterProvider router ={router}>\n\n   </RouterProvider>\n  )\n}\n"],"mappings":";AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,mBAAmB,EAAEC,cAAc,QAAQ,kBAAkB;AAEtE,OAAOC,IAAI,MAAM,cAAc;AAC/B,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,UAAU,MAAM,oBAAoB;AAC3C,OAAOC,eAAe,MAAM,yBAAyB;AACrD,OAAOC,YAAY,MAAM,sBAAsB;AAC/C,OAAOC,aAAa,MAAM,uBAAuB;AACjD,OAAOC,eAAe,MAAM,mBAAmB;AAAC;AAChD,MAAMC,MAAM,GAAGT,mBAAmB,CAAC,CACjC;EACEU,IAAI,EAAE,GAAG;EACTC,OAAO,eAAE,QAAC,IAAI;IAAA;IAAA;IAAA;EAAA,QAAE;EAChBC,QAAQ,EAAC,CACT;IAACC,KAAK,EAAE,IAAI;IAAEF,OAAO,eAAG,QAAC,QAAQ;MAAA;MAAA;MAAA;IAAA;EAAE,CAAC,EACpC;IAACD,IAAI,EAAE,QAAQ;IACfC,OAAO,eAAG,QAAC,eAAe;MAAA;MAAA;MAAA;IAAA,QAAE;IAC5BC,QAAQ,EAAC,CACP;MAACC,KAAK,EAAE,IAAI;MACZF,OAAO,eAAG,QAAC,UAAU;QAAA;QAAA;QAAA;MAAA,QAAE;MACvBG,MAAM,EAAE,YAAU;QAChB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;QAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UACjB;QAAA,CACA,MAAM;UACL,MAAMC,OAAO,GAAG,MAAMH,QAAQ,CAACI,IAAI,EAAE;UACrCD,OAAO,CAACE,MAAM;QAChB;MACF;IAEF,CAAC,EACC;MAACV,IAAI,EAAE,UAAU;MAAEC,OAAO,eAAG,QAAC,eAAe;QAAA;QAAA;QAAA;MAAA;IAAE,CAAC,EAChD;MAACD,IAAI,EAAE,KAAK;MAAEC,OAAO,eAAG,QAAC,YAAY;QAAA;QAAA;QAAA;MAAA;IAAE,CAAC,EACxC;MAACD,IAAI,EAAE,eAAe;MAAEC,OAAO,eAAG,QAAC,aAAa;QAAA;QAAA;QAAA;MAAA;IAAE,CAAC;EAErD,CAAC;AAEH,CAAC,CACF,CAAC;AACF,eAAe,SAASU,GAAG,GAAG;EAC5B,oBACC,QAAC,cAAc;IAAC,MAAM,EAAGZ;EAAO;IAAA;IAAA;IAAA;EAAA,QAEf;AAEpB;AAAC,KANuBY,GAAG;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}