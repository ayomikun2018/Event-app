{"ast":null,"code":"var _jsxFileName = \"/Users/opeyemiagbeja/Desktop/Stutern/react/routing-project/frontend/src/pages/EventsPage.js\",\n  _s = $RefreshSig$();\nimport EventsList from '../components/EventsList';\nimport { useLoaderData } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  const events = data.events;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventsList, {\n      events: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nexport async function loader() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    throw new Response(JSON.stringify({\n      message: 'Could not fetch events'\n    }), {\n      status: 500\n    });\n    //once it sees the throw it'll automatically check for the errorElement defined in App.js\n  } else {\n    //   const resData = await response.json();\n    //   return resData.events;\n    //OR\n    return response;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["EventsList","useLoaderData","EventsPage","data","events","loader","response","fetch","ok","Response","JSON","stringify","message","status"],"sources":["/Users/opeyemiagbeja/Desktop/Stutern/react/routing-project/frontend/src/pages/EventsPage.js"],"sourcesContent":["import EventsList from '../components/EventsList';\nimport {useLoaderData} from 'react-router-dom';\n\nfunction EventsPage() {\n    const data= useLoaderData()\n    const events= data.events\n  return (\n    <>{ <EventsList events={events} />}\n    </>\n  );\n}\n\nexport default EventsPage;\nexport async function loader(){\n    const response = await fetch('http://localhost:8080/events');\n\n        if (!response.ok) {\n            throw new Response(JSON.stringify({message: 'Could not fetch events'}),{status: 500})\n            //once it sees the throw it'll automatically check for the errorElement defined in App.js\n        } else {\n        //   const resData = await response.json();\n        //   return resData.events;\n        //OR\n        return response;\n        }\n}"],"mappings":";;AAAA,OAAOA,UAAU,MAAM,0BAA0B;AACjD,SAAQC,aAAa,QAAO,kBAAkB;AAAC;AAAA;AAE/C,SAASC,UAAU,GAAG;EAAA;EAClB,MAAMC,IAAI,GAAEF,aAAa,EAAE;EAC3B,MAAMG,MAAM,GAAED,IAAI,CAACC,MAAM;EAC3B,oBACE;IAAA,uBAAI,QAAC,UAAU;MAAC,MAAM,EAAEA;IAAO;MAAA;MAAA;MAAA;IAAA;EAAG,iBAC/B;AAEP;AAAC,GAPQF,UAAU;EAAA,QACHD,aAAa;AAAA;AAAA,KADpBC,UAAU;AASnB,eAAeA,UAAU;AACzB,OAAO,eAAeG,MAAM,GAAE;EAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAExD,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACd,MAAM,IAAIC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAC;MAACC,OAAO,EAAE;IAAwB,CAAC,CAAC,EAAC;MAACC,MAAM,EAAE;IAAG,CAAC,CAAC;IACrF;EACJ,CAAC,MAAM;IACP;IACA;IACA;IACA,OAAOP,QAAQ;EACf;AACR;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}